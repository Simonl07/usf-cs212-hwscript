# Set default values
LIB_PATH="/home/public/cs212/libraries"
TST_PATH="/home/public/cs212/tests"
GIT_ORG="usf-cs212-spring2019"

JAVA_PATH="/usr/lib/jvm/java-11-openjdk-amd64/bin/java"
JAVAC_PATH="/usr/lib/jvm/java-11-openjdk-amd64/bin/javac"
JUNIT_JAR="junit-platform-console-standalone-1.3.2.jar"

USAGE="Usage:\n$0 GithubUsername HomeworkName [-debug]\n"
USAGE="${USAGE}\nExample:"
USAGE="${USAGE}\n$0 sjengle WordIndex"
USAGE="${USAGE}\n$0 sjengle WordIndex -debug"

# Verify arguments are provided
if [[ $# -lt 2 ]];
then
	echo -e "Error: Must provide username and homework name."
	echo -e "${USAGE}"
	exit 1
fi 

# Set and remove all whitespace from variables
GITHUB="${1//[[:space:]]/}"
HOMEWORK="${2//[[:space:]]/}"

# Determine if debug is enabled
DEBUG_FLAG=false
if [[ $# -eq 3 && "${3//[[:space:\\/}" == "-debug" ]] ;
then
	echo ""
	echo "Debug enabled; files will not be deleted. Use this option sparingly!"

	DEBUG_FLAG=true
fi

# Get lowercase version of homework
HWKLOWER="${HOMEWORK,,}"

# Craft remote location
GIT_REMOTE="git@github.com:${GIT_ORG}/homework-${HWKLOWER}-${GITHUB}.git"

# Output parameters being used for testing
echo ""
echo "Homework: ${HOMEWORK}"
echo "  Github: ${GITHUB}"
echo "  Remote: ${GIT_REMOTE}"
echo "   Debug: ${DEBUG_FLAG}"

# Only create directory if repository is accessible
echo ""
echo "Checking repository access..."
git ls-remote ${GIT_REMOTE}

# Check if was successful.
if [ $? -ne 0 ];
then
	echo ""
	echo "Unable to access Github repository." 
	exit 1
fi

# Create temporary directory to store source code
GIT_LOCAL=$(mktemp -d ~/cs212-${HOMEWORK}-XXXX)
echo ""
echo "Creating temporary directory ${GIT_LOCAL}..."

# Setup cleanup only if debug flag is not enabled
if [[ "${DEBUG_FLAG}" = false ]];
then
	trap "rm -rf $GIT_LOCAL" EXIT
fi

cd $GIT_LOCAL

# Fetch the homework repository via git.
echo ""
echo "Fetching code from ${GIT_REMOTE}..."
git clone ${GIT_REMOTE} ${GIT_LOCAL}

# Check if export was successful.
if [ $? -ne 0 ];
then
	echo ""
    echo "Unable to clone Github repository."
    exit 1
fi

# Create temporary directory for fresh copies of the tests
mkdir tmp
TMP_LOCAL="${GIT_LOCAL}/tmp/"
TMP_REMOTE="git@github.com:${GIT_ORG}/template-${HWKLOWER}.git"

echo ""
echo "Fetching fresh tests from ${TMP_REMOTE}..."
git clone ${TMP_REMOTE} ${TMP_LOCAL}

# Check if export was successful
if [ $? -ne 0 ];
then
	echo ""
    echo "Unable to fetch clean test files."
    exit 1
fi

# Replace test files with clean copies
cp -R ${TMP_LOCAL}/test/* ${GIT_LOCAL}/test
rm -rf ${TMP_LOCAL}/tmp/

# Compile all of the java files
echo ""
echo "Compiling source code files..."

mkdir bin
mkdir reports
JUNIT_CP="$LIB_PATH:$LIB_PATH/*:$GIT_LOCAL:$GIT_LOCAL/*"
${JAVAC_PATH} -nowarn -cp "${JUNIT_CP}" -d "${GIT_LOCAL}/bin/" ${GIT_LOCAL}/src/*.java ${GIT_LOCAL}/test/*.java

# Test result of compile
if [[ $? -ne 0 ]];
then
    echo ""
    echo "Unable to compile source code." | tee ${REPORT}
    exit 1
fi

# Copy over log4j2 configuration
cp ${GIT_LOCAL}/src/*.xml ${GIT_LOCAL}/bin/ 2>/dev/null
ls -R ${GIT_LOCAL}/bin/

# Run JUnit Tests
echo ""
echo "Running unit tests in ${HOMEWORK}Test..."
cd ${GIT_LOCAL}
${JAVA_PATH} -cp "${LIB_PATH}/*" org.junit.platform.console.ConsoleLauncher -cp "bin" --select-class ${HOMEWORK}Test > "${GIT_LOCAL}/reports/output.txt"

RESULT=$?
cat "${GIT_LOCAL}/reports/output.txt"

# Test result of unit tests
if [ ${RESULT} -ne 0 ];
then
    echo ""

	if [[ ${DEBUG_FLAG} = true ]];
	then
		echo "Darn, one or more tests failed. Report written to:"
		echo "${GIT_LOCAL}/reports"
	else
		echo "Darn, one or more tests failed. Use the -debug flag to save the test report."
	fi
else
    echo ""
    echo "All ${HOMEWORK} tests for ${GITHUB} appear successful!"
fi

echo ""

